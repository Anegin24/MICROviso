)
ggplot(df_go_top, aes(x = Description, y = Count, fill = Ontology)) +
geom_col(width = 0.7) +
scale_fill_manual(
values = c("Biological Process" = "#E41A1C",
"Cellular Component" = "#4DAF4A",
"Molecular Function" = "#377EB8")
) +
labs(
title = "Enriched GO Terms",
x = NULL,
y = "Number of Genes",
fill = NULL
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 11)
)
ggplot(df_go_top, aes(x = Description, y = Count, fill = Ontology)) +
geom_col(width = 0.7) +
scale_fill_manual(
values = c(
"Biological Process" = "#E41A1C",
"Cellular Component" = "#4DAF4A",
"Molecular Function" = "#377EB8"
)
) +
labs(
title = "Enriched GO Terms",
x = NULL,
y = "Number of Genes",
fill = NULL
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 14),
axis.text.y = element_text(size = 14),
axis.title.y = element_text(size = 14),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.text = element_text(size = 13)
)
ggplot(df_go_top, aes(x = Description, y = Count, fill = Ontology)) +
geom_col(width = 0.7) +
scale_fill_manual(
values = c(
"Biological Process" = "#E41A1C",
"Cellular Component" = "#4DAF4A",
"Molecular Function" = "#377EB8"
)
) +
labs(
title = "Enriched GO Terms",
x = NULL,
y = "Number of Genes",
fill = NULL
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.y = element_text(size = 20),
plot.title = element_text(size = 25, face = "bold", hjust = 0.5),
legend.text = element_text(size = 20)
)
ggplot(df_go_top, aes(x = Description, y = Count, fill = Ontology)) +
geom_col(width = 0.7) +
scale_fill_manual(
values = c(
"Biological Process" = "#E41A1C",
"Cellular Component" = "#4DAF4A",
"Molecular Function" = "#377EB8"
)
) +
labs(
title = "Enriched GO Terms",
x = NULL,
y = "Number of Genes",
fill = NULL
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 16),
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 16),
plot.title = element_text(size = 25, face = "bold", hjust = 0.5),
legend.text = element_text(size = 20)
)
ggplot(df_go_top, aes(x = Description, y = Count, fill = Ontology)) +
geom_col(width = 0.7) +
scale_fill_manual(
values = c(
"Biological Process" = "#E41A1C",
"Cellular Component" = "#4DAF4A",
"Molecular Function" = "#377EB8"
)
) +
labs(
title = "Enriched GO Terms",
x = NULL,
y = "Number of Genes",
fill = NULL
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 14),
axis.text.y = element_text(size = 14),
axis.title.y = element_text(size = 14),
plot.title = element_text(size = 25, face = "bold", hjust = 0.5),
legend.text = element_text(size = 20)
)
ggplot(df_go_top, aes(x = Description, y = Count, fill = Ontology)) +
geom_col(width = 0.7) +
scale_fill_manual(
values = c(
"Biological Process" = "#E41A1C",
"Cellular Component" = "#4DAF4A",
"Molecular Function" = "#377EB8"
)
) +
labs(
title = "Enriched GO Terms",
x = NULL,
y = "Number of Genes",
fill = NULL
) +
theme_minimal(base_size = 16) +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 16),
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 16),
plot.title = element_text(size = 25, face = "bold", hjust = 0.5),
legend.text = element_text(size = 20)
)
ggplot(df_go_top, aes(x = Description, y = Count, fill = Ontology)) +
geom_col(width = 0.7) +
scale_fill_manual(
values = c(
"Biological Process" = "#E41A1C",
"Cellular Component" = "#4DAF4A",
"Molecular Function" = "#377EB8"
)
) +
labs(
title = "Enriched GO Terms",
x = NULL,
y = "Number of Genes",
fill = NULL
) +
theme_minimal(base_size = 16) +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 60, hjust = 1, vjust = 1, size = 16),
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 16),
plot.title = element_text(size = 25, face = "bold", hjust = 0.5),
legend.text = element_text(size = 20)
)
View(df_go_enrich)
df_go_enrich
write_tsv(df_go_enrich,"GO.tsv")
df_cog <- eggnog %>%
select(query_name, COG_category) %>%
filter(!is.na(COG_category), COG_category != "-") %>%
mutate(COG = strsplit(COG_category, "")) %>%
unnest(COG)
df_cog <- eggnog %>%
dplyr::select(query_name, COG_category) %>%
filter(!is.na(COG_category), COG_category != "-") %>%
mutate(COG = strsplit(COG_category, "")) %>%
unnest(COG)
# Gán mô tả
cog_desc <- c(
"J"="Translation", "A"="RNA processing", "K"="Transcription", "L"="Replication",
"B"="Chromatin structure", "D"="Cell cycle", "Y"="Nuclear structure", "V"="Defense",
"T"="Signal transduction", "M"="Cell wall/membrane", "N"="Motility", "Z"="Cytoskeleton",
"W"="Extracellular", "U"="Secretion/vesicular transport", "O"="Post-translational mod",
"C"="Energy production", "G"="Carbohydrate metabolism", "E"="Amino acid metabolism",
"F"="Nucleotide metabolism", "H"="Coenzyme metabolism", "I"="Lipid metabolism",
"P"="Inorganic transport", "Q"="Secondary metabolites", "R"="General prediction", "S"="Unknown"
)
df_cog_summary <- df_cog %>%
group_by(COG) %>%
summarise(Gene_Count = n(), .groups = "drop") %>%
mutate(Description = cog_desc[COG]) %>%
arrange(desc(Gene_Count))
ggplot(df_cog_summary, aes(x = reorder(Description, -Gene_Count), y = Gene_Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "COG Function Classification", x = "Function", y = "Number of Genes") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
###  Lọc gene COG unknown có ít nhất 1 trong 2 định danh ###
# Bước 1: Lọc gene có COG unknown (S)
genes_cog_unknown <- eggnog %>%
filter(!is.na(COG_category), grepl("S", COG_category))
# Bước 2: Giữ lại gene có ít nhất GO hoặc KEGG
genes_cog_unknown_annotated <- genes_cog_unknown %>%
filter(
(!is.na(GO_terms) & PFAMs != "-")
)
# Bước 3: Thống kê kết quả
annotated_n <- nrow(genes_cog_unknown_annotated)
total_n <- nrow(genes_cog_unknown)
percent_annotated <- round(annotated_n / total_n * 100, 2)
# In kết quả
cat("Tổng số gene COG unknown (S):", total_n, "\n")
cat("Số gene có PFAMs:", annotated_n, "\n")
cat("Tỷ lệ:", percent_annotated, "%\n")
df_cog <- eggnog %>%
dplyr::select(query_name, COG_category) %>%
filter(!is.na(COG_category), COG_category != "-") %>%
mutate(COG = strsplit(COG_category, "")) %>%
unnest(COG)
# Gán mô tả
cog_desc <- c(
"J" = "J: Translation, ribosomal structure and biogenesis",
"A" = "A: RNA processing and modification",
"K" = "K: Transcription",
"L" = "L: Replication, recombination and repair",
"B" = "B: Chromatin structure and dynamics",
"D" = "D: Cell cycle control, cell division, chromosome partitioning",
"Y" = "Y: Nuclear structure",
"V" = "V: Defense mechanisms",
"T" = "T: Signal transduction mechanisms",
"M" = "M: Cell wall/membrane/envelope biogenesis",
"N" = "N: Cell motility",
"Z" = "Z: Cytoskeleton",
"W" = "W: Extracellular structures",
"U" = "U: Intracellular trafficking, secretion, vesicular transport",
"O" = "O: Post-translational modification, protein turnover, chaperones",
"C" = "C: Energy production and conversion",
"G" = "G: Carbohydrate transport and metabolism",
"E" = "E: Amino acid transport and metabolism",
"F" = "F: Nucleotide transport and metabolism",
"H" = "H: Coenzyme transport and metabolism",
"I" = "I: Lipid transport and metabolism",
"P" = "P: Inorganic ion transport and metabolism",
"Q" = "Q: Secondary metabolites biosynthesis, transport and catabolism",
"R" = "R: General function prediction only",
"S" = "S: Function unknown"
)
df_cog_summary <- df_cog %>%
group_by(COG) %>%
summarise(Gene_Count = n(), .groups = "drop") %>%
mutate(Description = cog_desc[COG]) %>%
arrange(desc(Gene_Count))
ggplot(df_cog_summary, aes(x = reorder(Description, -Gene_Count), y = Gene_Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "COG Function Classification", x = "Function", y = "Number of Genes") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
###  Lọc gene COG unknown có ít nhất 1 trong 2 định danh ###
# Bước 1: Lọc gene có COG unknown (S)
genes_cog_unknown <- eggnog %>%
filter(!is.na(COG_category), grepl("S", COG_category))
# Bước 2: Giữ lại gene có ít nhất GO hoặc KEGG
genes_cog_unknown_annotated <- genes_cog_unknown %>%
filter(
(!is.na(GO_terms) & PFAMs != "-")
)
# Bước 3: Thống kê kết quả
annotated_n <- nrow(genes_cog_unknown_annotated)
total_n <- nrow(genes_cog_unknown)
percent_annotated <- round(annotated_n / total_n * 100, 2)
# In kết quả
cat("Tổng số gene COG unknown (S):", total_n, "\n")
cat("Số gene có PFAMs:", annotated_n, "\n")
cat("Tỷ lệ:", percent_annotated, "%\n")
ggplot(df_cog_summary, aes(x = reorder(Description, -Gene_Count), y = Gene_Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "COG Function Classification", x = NULL, y = "Number of Genes") +
theme(axis.text.x = element_text(angle = 60, hjust = 1,size=14))
ggplot(df_cog_summary, aes(x = reorder(Description, -Gene_Count), y = Gene_Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "COG Function Classification", x = NULL, y = "Number of Genes") +
theme(axis.text.x = element_text(angle = 60, hjust = 1,size=12))
View(df_cog_summary)
write_tsv(df_cog_summary,"COG.tsv")
df_pfam <- eggnog %>%
dplyr::select(query_name, PFAMs) %>%
filter(!is.na(PFAMs), PFAMs != "-") %>%
separate_rows(PFAMs, sep = ",") %>%
mutate(pfam_id = str_extract(PFAMs, "^PF\\d+"),
pfam_desc = str_extract(PFAMs, "(?<=\\^).+")) %>%
group_by(pfam_desc) %>%
summarise(Gene_Count = n(), .groups = "drop") %>%
arrange(desc(Gene_Count)) %>%
head(20) %>%
mutate(pfam_desc = factor(pfam_desc, levels = rev(pfam_desc)))
# Vẽ biểu đồ
ggplot(df_pfam, aes(x = pfam_desc, y = Gene_Count)) +
geom_col(fill = "#1F78B4", width = 0.7) +
geom_text(aes(label = Gene_Count), hjust = -0.1, size = 4) +
coord_flip() +
labs(
title = "Top 20 PFAM Protein Domains",
x = "PFAM Domain",
y = "Number of Genes"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.y = element_text(size = 12),
plot.title = element_text(face = "bold"),
plot.margin = margin(10, 30, 10, 10)
) +
xlim(0, max(df_pfam$Gene_Count) * 1.1)
df_pfam <- eggnog %>%
dplyr::select(query_name, PFAMs) %>%
filter(!is.na(PFAMs), PFAMs != "-") %>%
separate_rows(PFAMs, sep = ",") %>%
mutate(pfam_id = str_extract(PFAMs, "^PF\\d+"),
pfam_desc = str_extract(PFAMs, "(?<=\\^).+")) %>%
group_by(pfam_desc) %>%
summarise(Gene_Count = n(), .groups = "drop") %>%
arrange(desc(Gene_Count)) %>%
head(20) %>%
mutate(pfam_desc = factor(pfam_desc, levels = rev(pfam_desc)))
# Vẽ biểu đồ
ggplot(df_pfam, aes(x = pfam_desc, y = Gene_Count)) +
geom_col(fill = "#1F78B4", width = 0.7) +
geom_text(aes(label = Gene_Count), hjust = -0.1, size = 4) +
coord_flip() +
labs(
title = "Top 20 PFAM Protein Domains",
x = "PFAM Domain",
y = "Number of Genes"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.y = element_text(size = 12),
plot.title = element_text(face = "bold"),
plot.margin = margin(10, 30, 10, 10)
)
View(eggnog)
df_pfam <- eggnog %>%
dplyr::select(query_name, PFAMs) %>%
filter(!is.na(PFAMs), PFAMs != "-") %>%
separate_rows(PFAMs, sep = ",")
View(df_pfam)
df_pfam <- eggnog %>%
dplyr::select(query_name, PFAMs) %>%
filter(!is.na(PFAMs), PFAMs != "-") %>%
separate_rows(PFAMs, sep = ",") %>%
mutate(pfam_id = str_extract(PFAMs, "^PF\\d+"),
pfam_desc = str_extract(PFAMs, "(?<=\\^).+"))
ggplot(df_cog_summary, aes(x = reorder(Description, -Gene_Count), y = Gene_Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
geom_text(aes(label = Count), hjust = -0.1, size = 4) +
labs(title = "COG Function Classification", x = NULL, y = "Number of Genes") +
theme(axis.text.x = element_text(angle = 60, hjust = 1,size=12))
df_cog <- eggnog %>%
dplyr::select(query_name, COG_category) %>%
filter(!is.na(COG_category), COG_category != "-") %>%
mutate(COG = strsplit(COG_category, "")) %>%
unnest(COG)
# Gán mô tả
cog_desc <- c(
"J" = "J: Translation, ribosomal structure and biogenesis",
"A" = "A: RNA processing and modification",
"K" = "K: Transcription",
"L" = "L: Replication, recombination and repair",
"B" = "B: Chromatin structure and dynamics",
"D" = "D: Cell cycle control, cell division, chromosome partitioning",
"Y" = "Y: Nuclear structure",
"V" = "V: Defense mechanisms",
"T" = "T: Signal transduction mechanisms",
"M" = "M: Cell wall/membrane/envelope biogenesis",
"N" = "N: Cell motility",
"Z" = "Z: Cytoskeleton",
"W" = "W: Extracellular structures",
"U" = "U: Intracellular trafficking, secretion, vesicular transport",
"O" = "O: Post-translational modification, protein turnover, chaperones",
"C" = "C: Energy production and conversion",
"G" = "G: Carbohydrate transport and metabolism",
"E" = "E: Amino acid transport and metabolism",
"F" = "F: Nucleotide transport and metabolism",
"H" = "H: Coenzyme transport and metabolism",
"I" = "I: Lipid transport and metabolism",
"P" = "P: Inorganic ion transport and metabolism",
"Q" = "Q: Secondary metabolites biosynthesis, transport and catabolism",
"R" = "R: General function prediction only",
"S" = "S: Function unknown"
)
df_cog_summary <- df_cog %>%
group_by(COG) %>%
summarise(Gene_Count = n(), .groups = "drop") %>%
mutate(Description = cog_desc[COG]) %>%
arrange(desc(Gene_Count))
ggplot(df_cog_summary, aes(x = reorder(Description, -Gene_Count), y = Gene_Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
geom_text(aes(label = Count), hjust = -0.1, size = 4) +
labs(title = "COG Function Classification", x = NULL, y = "Number of Genes") +
theme(axis.text.x = element_text(angle = 60, hjust = 1,size=12))
View(df_cog_summary)
ggplot(df_cog_summary, aes(x = reorder(Description, -Gene_Count), y = Gene_Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
geom_text(aes(label = Gene_Count), hjust = -0.1, size = 4) +
labs(title = "COG Function Classification", x = NULL, y = "Number of Genes") +
theme(axis.text.x = element_text(angle = 60, hjust = 1,size=12))
ggplot(df_cog_summary, aes(x = reorder(Description, -Gene_Count), y = Gene_Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
geom_text(aes(label = Gene_Count), hjust = -0.1, size = 4) +
labs(title = "COG Function Classification", x = NULL, y = "Number of Genes") +
theme(axis.text.x = element_text(angle = 60, hjust = 1,size=12))+
xlim(0, max(df_kegg_top$Count) * 1.1) +
ggplot(df_cog_summary, aes(x = reorder(Description, -Gene_Count), y = Gene_Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
geom_text(aes(label = Gene_Count), hjust = -0.1, size = 4) +
labs(title = "COG Function Classification", x = NULL, y = "Number of Genes") +
theme(axis.text.x = element_text(angle = 60, hjust = 1,size=12))+
xlim(0, max(df_kegg_top$Count) * 1.1)
ggplot(df_cog_summary, aes(x = reorder(Description, -Gene_Count), y = Gene_Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
geom_text(aes(label = Gene_Count), hjust = -0.1, size = 4) +
labs(title = "COG Function Classification", x = NULL, y = "Number of Genes") +
theme(axis.text.x = element_text(angle = 60, hjust = 1,size=12))+
ylim(0, max(df_kegg_top$Count) * 1.1)
ggplot(df_cog_summary, aes(x = reorder(Description, -Gene_Count), y = Gene_Count)) +
geom_bar(stat = "identity", fill = "steelblue", width = 0.7) +
geom_text(aes(label = Gene_Count), vjust = -0.2, size = 4) +
labs(
title = "COG Function Classification",
x = NULL,
y = "Number of Genes"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
plot.title = element_text(hjust = 0.5)
) +
ylim(0, max(df_cog_summary$Gene_Count) * 1.1)
ggplot(df_cog_summary, aes(x = reorder(Description, -Gene_Count), y = Gene_Count)) +
geom_bar(stat = "identity", fill = "steelblue", width = 0.7) +
geom_text(aes(label = Gene_Count), vjust = -0.2, size = 4) +
labs(
title = "COG Function Classification",
x = NULL,
y = "Number of Genes"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 60, hjust = 1, size = 12),
plot.title = element_text(hjust = 0.5)
) +
ylim(0, max(df_cog_summary$Gene_Count) * 1.1)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("PFAM.db")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("PFAM.db")
install.packages("BiocManager")
BiocManager::install("PFAM.db", version = "3.21")
setwd("/media/anegin97/DATA/DATA/Metagenomic/TrainingDHY/user2/Eramic26")
library(clusterProfiler)
library(dplyr)
library(tidyverse)
library(stringr)
library(ggplot2)
library(GO.db)
library(PFAM.db)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("PFAM.db")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.21")
library(clusterProfiler)
library(dplyr)
library(tidyverse)
library(stringr)
library(ggplot2)
library(GO.db)
library(PFAM.db)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("PFAM.db")
library(clusterProfiler)
library(dplyr)
library(tidyverse)
library(stringr)
library(ggplot2)
library(GO.db)
library(PFAM.db)
eggnog <- read.delim("gene_eggnog.emapper.annotations", header = FALSE, sep = "\t", comment.char = "#")
# 2. Gán tên cột theo định dạng của eggNOG
colnames(eggnog) <- c(
"query_name", "seed_eggNOG_ortholog", "seed_ortholog_evalue", "seed_ortholog_score",
"predicted_taxonomic_scope", "eggNOG_OGs", "COG_category", "COG_id", "COG_functional_annotation",
"GO_terms", "EC_number", "KEGG_KO", "KEGG_pathway", "KEGG_module", "KEGG_reaction",
"KEGG_rclass", "BRITE", "KEGG_TC", "CAZy", "BiGG_reaction", "PFAMs"
)
df_cazy <- eggnog %>%
filter(!is.na(CAZy), CAZy != "-") %>%
separate_rows(CAZy, sep = ",") %>%
mutate(CAZy = str_trim(CAZy)) %>%
group_by(CAZy) %>%
summarise(Gene_Count = n(), .groups = "drop") %>%
arrange(desc(Gene_Count))
