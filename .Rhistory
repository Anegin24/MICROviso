setwd("/media/anegin97/DATA/DATA/Metagenomic/CBBproject/antibiotic mouse/")
ps <- readRDS("v3-v4.phyloseq")
library(phyloseq)
otu_df = as.data.frame(otu_table(ps))
View(otu_df)
list(
otu_df = as.data.frame(otu_table(ps)),
tax_df = as.data.frame(tax_table(ps)),
meta_df = as.data.frame(sample_data(ps)),
)
list(
otu_df = as.data.frame(otu_table(ps)),
tax_df = as.data.frame(tax_table(ps)),
meta_df = as.data.frame(sample_data(ps))
)
taxonomy <- as.data.frame(otu_table(ps))
taxonomy <- rownames_to_column(table, var = "FeatureID")
library(tidyverse)
taxonomy <- as.data.frame(otu_table(ps))
taxonomy <- rownames_to_column(table, var = "FeatureID")
taxonomy <- as.data.frame(otu_table(ps))
taxonomy <- rownames_to_column(taxonomy, var = "FeatureID")
View(taxonomy)
table <- as.data.frame(tax_table(ps))
table <- rownames_to_column(table, var = "FeatureID")
View(table)
metadata <- as.data.frame(sample_data(ps))
metadata <- rownames_to_column(metadata, var = "sample-id")
View(metadata)
metadata <- as.data.frame(sample_data(ps))
View(metadata)
metadata <- rownames_to_column(metadata, var = "sample-id")
View(metadata)
table <- as.data.frame(tax_table(ps))
table <- rownames_to_column(table, var = "FeatureID")
metadata <- as.data.frame(sample_data(ps))
View(metadata)
metadata <- rownames_to_column(metadata, var = "sample-id")
View(metadata)
metadata <- as.data.frame(sample_data(ps))
metadata <- as.data.frame(sample_data(ps))
metadata <- as.data.frame(sample_data(ps))
View(metadata)
metadata <- rownames_to_column(metadata, var = "sample-id")
View(metadata)
ps <- readRDS(phyloseq_path)
ps <- readRDS("v3-v4.phyloseq")
metadata <- as.data.frame(sample_data(ps))
metadata <- rownames_to_column(metadata, var = "sample-id")
dim(sample_data(ps))
metadata <- as.data.frame(sample_data(ps))
metadata <- tibble::rownames_to_column(metadata, var = "sample-id")
View(metadata)
metadata <- as.data.frame(sample_data(ps))
metadata <- rownames_to_column(metadata, var = "sampleID")
metadata <- as.data.frame(sample_data(ps))
View(metadata)
metadata
metadata <- as.data.frame(sample_data(ps))
metadata <- rownames_to_column(metadata)
View(metadata)
metadata <- as.data.frame(sample_data(ps))
metadata <- as.data.frame(sample_data(ps))
metadata1 <- rownames_to_column(metadata, var = "sampleID")
metadata <- as.data.frame(sample_data(ps))
library(MICROviso)
setwd("/media/anegin97/DATA/DATA/Metagenomic/CBBproject/antibiotic mouse/")
import_phyloseq("v3-v4.phyloseq")
library(phyloseq)
import_phyloseq("v3-v4.phyloseq")
import_physeq("v3-v4.phyloseq")
cal_alpha
cal_alpha()
devtools::install_local("~/Bioinformatics/MICROviso-master.zip")
devtools::install_local("~/Bioinformatics/MICROviso-master.zip")
library(MICROviso)
getwd()
setwd("/media/anegin97/DATA/DATA/Metagenomic/CBBproject/antibiotic mouse/")
import_phyloseq("v3-v4.phyloseq")
View(taxonomy)
metadata<-import_metadata("../old/sample-metadata.tsv")
alphadiversity <- cal_alpha(ps)
devtools::install_local("~/Bioinformatics/MICROviso-master.zip")
library(MICROviso)
setwd("/media/anegin97/DATA/DATA/Metagenomic/CBBproject/antibiotic mouse/")
import_phyloseq(phyloseq_path = "v3-v4.phyloseq")
metadata<-import_metadata("../old/sample-metadata.tsv")
alphadiversity<-cal_alpha(ps)
devtools::document()
devtools::document()
devtools::document("~/Bioinformatics/MICROviso/")
list.files()
devtools::install("~/Bioinformatics/MICROviso/")
library(MICROviso)
alphadiversity<-cal_alpha(ps)
setwd("~/Bioinformatics/MICROviso")
devtools::document()
file.remove("NAMESPACE")
devtools::document()
devtools::install()
library(MICROviso)
setwd("/media/anegin97/DATA/DATA/Metagenomic/CBBproject/antibiotic mouse/")
alphadiversity <- cal_alpha(ps)
remove.packages("MICROviso")
rm NAMESPACE
setwd("~/Bioinformatics/MICROviso")
devtools::document()
setwd("~/Bioinformatics/MICROviso")
devtools::document()
> setwd("~/Bioinformatics/MICROviso")
setwd("~/Bioinformatics/MICROviso")
devtools::document()
devtools::install()
library(MICROviso)
setwd("/media/anegin97/DATA/DATA/Metagenomic/CBBproject/antibiotic mouse/")
import_physeq("v3-v4.phyloseq")
import_phyloseq("v3-v4.phyloseq")
metadata <- import_metadata("../old/sample-metadata.tsv")
alpha <- alpha_cal(ps)
alpha <- cal_alpha(ps)
View(alpha)
alphaplot<-plot_alpha(alpha = alpha, metadata = metadata, x = "treatment", facet = "timeline")
View(alphaplot)
alphaplot[["plots"]]
alphaplot[["combined"]]
plot_phylum(ps, group_vars = c("treatment", "timeline"), facet = "timeline", x_var = "treatment")
getwd()
setwd("~")
getwd()
devtools::install("MICROviso-master.zip")
devtools::install("MICROviso-master")
library(MICROviso)
setwd("/media/anegin97/DATA/DATA/Metagenomic/CBBproject/antibiotic mouse/")
import_phyloseq("v3-v4.phyloseq")
metadata <- import_metadata("../old/sample-metadata.tsv")
alpha <- cal_alpha(ps)
alphaplot<-plot_alpha(alpha = alpha, metadata = metadata, x = "treatment", facet = "timeline")
View(metadata)
library(tidyverse)
rownames(metadata)<-metadata$`sample-id`
metadata<-metadata[-1,]
metadata<-metadata[-1,]
metadata<-import_metadata("../old/sample-metadata.tsv")
rownames(metadata)<-metadata$`sample-id`
metadata<-metadata[,-1]
metadata<-import_metadata("../old/sample-metadata.tsv")
rownames(metadata)<-metadata$`sample-id`
metadata <- metadata %>% select(-`sample-id`)
metadata<-import_metadata("../old/sample-metadata.tsv")
sample_data(ps) <- sample_data(metadata)
library(phyloseq)
sample_data(ps) <- sample_data(metadata)
sample_names(ps)
rownames(metadata)
metadata<-import_metadata("../old/sample-metadata.tsv")
rownames(metadata) <- metadata$`sample-id`
metadata$`sample-id` <- NULL
metadata <- readr::read_tsv("../old/sample-metadata.tsv") |> as.data.frame()
rownames(metadata) <- metadata$`sample-id`
metadata$`sample-id` <- NULL
identical(rownames(metadata), sample_names(ps))
identical(rownames(metadata), sample_names(ps))
sample_data(ps) <- sample_data(metadata)
saveRDS(ps, file = "V3-V4-new.phyloseq")
import_phyloseq("V3-V4-new.phyloseq")
View(metadata)
alphadiversity<-cal_alpha(data = ps)
View(alphadiversity)
plotalpha<-plot_alpha(alpha = alphadiversity,metadata = metadata,x = "treatment",facet = "timeline")
plotalpha
plot_phylum(data = ps,group_vars = c("timeline","treatment"),facet = "treatment",x_var = "timeline")
library(qiime2R)
plot_phylum(data = ps,group_vars = c("timeline","treatment"),facet = "treatment",x_var = "timeline")
plot_genus(data = ps,group_vars = c("timeline","treatment"),facet = "treatment",x_var = "timeline")
#' Plot Beta Diversity using PCoA (Bray-Curtis)
#'
#' This function calculates Bray-Curtis distances, performs PCoA, and plots
#' the ordination with optional coloring and faceting.
#'
#' @param data A `phyloseq` object.
#' @param color A sample metadata variable to color the points.
#' @param facet Optional. A metadata variable to facet the plot by.
#' @param weighted Logical. Whether to use weighted Bray-Curtis distance. Default is FALSE.
#'
#' @return A `ggplot2` object of the ordination plot.
#'
#' @import ggplot2
#' @importFrom phyloseq distance ordinate plot_ordination
#' @export
plot_beta <- function(data, color, facet = NULL, weighted = FALSE) {
# Calculate Bray-Curtis distance
bray <- phyloseq::distance(data, method = "bray", weighted = weighted)
# Ordinate using PCoA
ordination <- ordinate(data, method = "PCoA", distance = bray)
# Create ordination plot
p <- plot_ordination(data, ordination, color = color) +
theme(aspect.ratio = 1)
# Add faceting if specified
if (!is.null(facet)) {
p <- p + facet_wrap(as.formula(paste("~", facet)))
}
return(p)
}
plot_alpha(alpha = alphadiversity,metadata = metadata,x = "timeline",facet = "treatment")
plot_alpha(alpha = alphadiversity,metadata = metadata,x = "treatment",facet = "timeline")
#' Plot Beta Diversity using PCoA (Bray-Curtis)
#'
#' This function calculates Bray-Curtis distances, performs PCoA, and plots
#' the ordination with optional coloring and faceting.
#'
#' @param data A `phyloseq` object.
#' @param color A sample metadata variable to color the points.
#' @param facet Optional. A metadata variable to facet the plot by.
#' @param weighted Logical. Whether to use weighted Bray-Curtis distance. Default is FALSE.
#'
#' @return A `ggplot2` object of the ordination plot.
#'
#' @import ggplot2
#' @importFrom phyloseq distance ordinate plot_ordination
#' @export
plot_beta <- function(data, color, facet = NULL, weighted = FALSE) {
# Calculate Bray-Curtis distance
bray <- phyloseq::distance(data, method = "bray", weighted = weighted)
# Ordinate using PCoA
ordination <- ordinate(data, method = "PCoA", distance = bray)
# Create ordination plot
p <- plot_ordination(data, ordination, color = color) +
theme(aspect.ratio = 1)
# Add faceting if specified
if (!is.null(facet)) {
p <- p + facet_wrap(as.formula(paste("~", facet)))
}
return(p)
}
plot_beta(data = ps,color = "treatment")
plot_beta(data = ps,color = "treatment",facet = "timeline")
p<-plot_beta(data = ps,color = "treatment",facet = "timeline")
#' Plot Beta Diversity using PCoA (Bray-Curtis)
#'
#' This function calculates Bray-Curtis distances, performs PCoA, and plots
#' the ordination with optional coloring and faceting.
#'
#' @param data A `phyloseq` object.
#' @param color A sample metadata variable to color the points.
#' @param facet Optional. A metadata variable to facet the plot by.
#' @param weighted Logical. Whether to use weighted Bray-Curtis distance. Default is FALSE.
#'
#' @return A `ggplot2` object of the ordination plot.
#'
#' @import ggplot2
#' @importFrom phyloseq distance ordinate plot_ordination
#' @export
plot_beta <- function(data, color, facet = NULL, weighted = FALSE) {
# Calculate Bray-Curtis distance
bray <- phyloseq::distance(data, method = "bray", weighted = weighted)
# Ordinate using PCoA
ordination <- ordinate(data, method = "PCoA", distance = bray)
# Create ordination plot
p <- plot_ordination(data, ordination, color = color) +
stat_ellipse(type = "t", linetype = 2) +
theme(aspect.ratio = 1)
# Add faceting if specified
if (!is.null(facet)) {
p <- p + facet_wrap(as.formula(paste("~", facet)))
}
return(p)
}
p<-plot_beta(data = ps,color = "treatment",facet = "timeline")
p
#' Plot Beta Diversity using Ordination Methods
#'
#' This function calculates distance matrices (e.g., Bray-Curtis, Jaccard, UniFrac),
#' performs ordination (e.g., PCoA, NMDS), and plots the ordination with optional
#' coloring, faceting, and ellipse overlays.
#'
#' @param data A `phyloseq` object.
#' @param color A sample metadata variable to color the points.
#' @param facet Optional. A metadata variable to facet the plot by.
#' @param distance_method Character. Distance metric to use (e.g., "bray", "jaccard", "unifrac").
#' @param method Character. Ordination method (e.g., "PCoA", "NMDS", "DCA"). Default is "PCoA".
#' @param weighted Logical. Whether to use weighted version for UniFrac or Bray. Default is FALSE.
#'
#' @return A `ggplot2` object of the ordination plot.
#'
#' @import ggplot2
#' @importFrom phyloseq distance ordinate plot_ordination
#' @export
plot_beta <- function(data, color, facet = NULL,
distance_method = "bray",
method = "PCoA",
weighted = FALSE) {
# Calculate distance matrix
dist <- phyloseq::distance(data, method = distance_method, weighted = weighted)
# Perform ordination
ordination <- ordinate(data, method = method, distance = dist)
# Create ordination plot
p <- plot_ordination(data, ordination, color = color) +
stat_ellipse(type = "t", linetype = 2) +
theme(aspect.ratio = 1)
# Add faceting if specified
if (!is.null(facet)) {
p <- p + facet_wrap(as.formula(paste("~", facet)))
}
return(p)
}
plot_beta(data = ps,color = "treatment",facet = "timeline",distance_method = "bray",method = "NMDS")
plot_beta(data = ps,color = "treatment",facet = "timeline",distance_method = "bray",method = "PCoA")
plot_beta(data = ps,color = "treatment",facet = "timeline",distance_method = "bray",method = "DCA")
plot_beta(data = ps,color = "treatment",facet = "timeline",distance_method = "bray",method = "PCoA")
#' Plot Alpha Diversity Boxplots and Export Plots to Global Environment
#'
#' This function generates boxplots for specified alpha diversity metrics using `ggplot2`
#' and optionally facets them by a grouping variable. It also assigns each individual plot
#' and the combined patchwork plot to the global environment for direct access.
#'
#' @param alpha A `data.frame` containing alpha diversity metrics (e.g., from `alpha_cal()`).
#' @param metadata A `data.frame` containing sample metadata (must share an ID column with `alpha`).
#' @param metrics A character vector of metrics to visualize (e.g., c("Observed", "Shannon")).
#' @param x A string specifying the column in metadata to use for the x-axis (e.g., "treatment").
#' @param facet Optional. A string specifying the metadata column to facet by (e.g., "timeline").
#'
#' @return A named list with:
#' \describe{
#'   \item{plots}{A named list of individual `ggplot` objects, keyed by metric name.}
#'   \item{combined}{A combined `patchwork` plot of all provided metrics.}
#' }
#'
#' @details
#' This function automatically attempts to match the sample identifier columns between
#' `alpha` and `metadata` by comparing overlapping values. It uses `patchwork` to combine plots.
#' The result includes individual plots assigned to global environment (e.g., `Observed`, `Shannon`)
#' and a combined object named `alpha_combined`.
#'
#' @seealso \code{\link{alpha_cal}}, \code{\link[ggplot2]{ggplot}}, \code{\link[patchwork]{wrap_plots}}
#'
#' @inheritParams plot_alpha
#' @import ggplot2
#' @importFrom dplyr inner_join
#' @importFrom ggpubr stat_compare_means
#' @export
plot_alpha <- function(alpha, metadata, metrics = c("Observed", "Shannon", "Chao1", "Simpson"), x, facet = NULL) {
match_col <- function(df1, df2) {
for (col1 in colnames(df1)) {
for (col2 in colnames(df2)) {
if (all(na.omit(df1[[col1]]) %in% df2[[col2]])) {
return(c(col1, col2))
}
}
}
return(NULL)
}
id_cols <- match_col(alpha, metadata)
if (is.null(id_cols)) stop("❌ Cannot detect matching SampleID columns by content")
merged <- dplyr::inner_join(alpha, metadata, by = setNames(id_cols[2], id_cols[1]))
# Generate comparisons for stat_compare_means
group_levels <- unique(na.omit(merged[[x]]))
if (length(group_levels) >= 2) {
my_comparison <- combn(group_levels, 2, simplify = FALSE)
} else {
my_comparison <- NULL
}
plots <- list()
for (metric in metrics) {
p <- ggplot(merged, aes(x = .data[[x]], y = .data[[metric]])) +
geom_boxplot(alpha = 0.5) +
labs(title = paste(metric, "Diversity"), y = metric, x = x) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
if (!is.null(my_comparison)) {
p <- p + ggpubr::stat_compare_means(comparisons = my_comparison)
}
if (!is.null(facet)) {
p <- p + facet_wrap(as.formula(paste("~", facet)))
}
plots[[metric]] <- p
assign(metric, p, envir = globalenv())
}
if (all(c("Shannon", "Observed", "Chao1", "Simpson") %in% names(plots))) {
combined <- (plots[["Shannon"]] | plots[["Observed"]]) / (plots[["Chao1"]] | plots[["Simpson"]]) +
patchwork::plot_annotation(tag_levels = "A") &
theme(plot.tag = element_text(size = 16, face = "bold"))
} else {
combined <- patchwork::wrap_plots(plots)
}
assign("alpha_combined", combined, envir = globalenv())
return(list(plots = plots, combined = combined))
}
plot_alpha(alpha = alphadiversity,metadata = metadata,x = "treatment",facet = "timeline")
plot_alpha(alpha = alphadiversity,metadata = metadata,x = "timeline",facet = "treatment")
plot_alpha(alpha = alphadiversity,metadata = metadata,x = "timeline",facet = "treatment")
#' Plot Alpha Diversity Boxplots and Export Plots to Global Environment
#'
#' This function generates boxplots for specified alpha diversity metrics using `ggplot2`
#' and optionally facets them by a grouping variable. It also assigns each individual plot
#' and the combined patchwork plot to the global environment for direct access.
#'
#' @param alpha A `data.frame` containing alpha diversity metrics (e.g., from `alpha_cal()`).
#' @param metadata A `data.frame` containing sample metadata (must share an ID column with `alpha`).
#' @param metrics A character vector of metrics to visualize (e.g., c("Observed", "Shannon")).
#' @param x A string specifying the column in metadata to use for the x-axis (e.g., "treatment").
#' @param facet Optional. A string specifying the metadata column to facet by (e.g., "timeline").
#'
#' @return A named list with:
#' \describe{
#'   \item{plots}{A named list of individual `ggplot` objects, keyed by metric name.}
#'   \item{combined}{A combined `patchwork` plot of all provided metrics.}
#' }
#'
#' @details
#' This function automatically attempts to match the sample identifier columns between
#' `alpha` and `metadata` by comparing overlapping values. It uses `patchwork` to combine plots.
#' The result includes individual plots assigned to global environment (e.g., `Observed`, `Shannon`)
#' and a combined object named `alpha_combined`.
#'
#' @seealso \code{\link{alpha_cal}}, \code{\link[ggplot2]{ggplot}}, \code{\link[patchwork]{wrap_plots}}
#'
#' @inheritParams plot_alpha
#' @import ggplot2
#' @importFrom dplyr inner_join
#' @importFrom ggpubr stat_compare_means
#' @export
plot_alpha <- function(alpha, metadata, metrics = c("Observed", "Shannon", "Chao1", "Simpson"), x, facet = NULL) {
match_col <- function(df1, df2) {
for (col1 in colnames(df1)) {
for (col2 in colnames(df2)) {
if (all(na.omit(df1[[col1]]) %in% df2[[col2]])) {
return(c(col1, col2))
}
}
}
return(NULL)
}
id_cols <- match_col(alpha, metadata)
if (is.null(id_cols)) stop("❌ Cannot detect matching SampleID columns by content")
merged <- dplyr::inner_join(alpha, metadata, by = setNames(id_cols[2], id_cols[1]))
# Generate comparisons for stat_compare_means
group_levels <- unique(na.omit(merged[[x]]))
if (length(group_levels) >= 2) {
my_comparison <- combn(group_levels, 2, simplify = FALSE)
} else {
my_comparison <- NULL
}
plots <- list()
for (metric in metrics) {
p <- ggplot(merged, aes(x = .data[[x]], y = .data[[metric]])) +
geom_boxplot(alpha = 0.5) +
labs(title = paste(metric, "Diversity"), y = metric, x = x) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
if (!is.null(my_comparison)) {
p <- p + ggpubr::stat_compare_means(comparisons = my_comparison,
label = "p.format",           # hoặc "p.signif"
tip.length = 0.01,
step.increase = 0.1           # giúp đẩy p-value lên cao dần để tránh trùng
)
}
if (!is.null(facet)) {
p <- p + facet_wrap(as.formula(paste("~", facet)))
}
plots[[metric]] <- p
assign(metric, p, envir = globalenv())
}
if (all(c("Shannon", "Observed", "Chao1", "Simpson") %in% names(plots))) {
combined <- (plots[["Shannon"]] | plots[["Observed"]]) / (plots[["Chao1"]] | plots[["Simpson"]]) +
patchwork::plot_annotation(tag_levels = "A") &
theme(plot.tag = element_text(size = 16, face = "bold"))
} else {
combined <- patchwork::wrap_plots(plots)
}
assign("alpha_combined", combined, envir = globalenv())
return(list(plots = plots, combined = combined))
}
plot_alpha(alpha = alphadiversity,metadata = metadata,x = "timeline",facet = "treatment")
View(plotalpha)
plotalpha[["plots"]]
plotalpha<-plot_alpha(alpha = alphadiversity,metadata = metadata,x = "timeline",facet = "treatment")
plotalpha[["plots"]]
devtools::document()
getwd()
setwd("~/Bioinformatics/MICROviso/")
getwd()
devtools::document()
devtools::load_all()
rm(list = c("plot_alpha", "plot_beta"))
devtools::load_all()
devtools::document()
library(devtools)
setwd("~/Bioinformatics/MICROviso/")
devtools::document()
devtools::document()
getwd()
devtools::load_all()
devtools::document()
devtools::install_github("anegin24/MICROviso")
library(MICROviso)
beta<-plot_beta(data = ps,distance_method = "bray",method = "PCoA",facet = "timeline",color = "treatment")
getwd()
